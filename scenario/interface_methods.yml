input:
    input.go: |
        package structs

        // goverter:converter
        // goverter:extend ConvertInterface
        type Converter interface {
            Convert(source map[string]interface {
                Test(x bool) (l string, err error)
            }) map[string]interface{ Test2() }
        }

        func ConvertInterface(x interface {
            Test(x bool) (l string, err error)
        }) interface{ Test2() } {
            return nil
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/summit-fi/goverter/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source map[string]interface {
        	Test(bool) (string, error)
        }) map[string]interface {
        	Test2()
        } {
        	var mapStringUnknown map[string]interface {
        		Test2()
        	}
        	if source != nil {
        		mapStringUnknown = make(map[string]interface {
        			Test2()
        		}, len(source))
        		for key, value := range source {
        			mapStringUnknown[key] = execution.ConvertInterface(value)
        		}
        	}
        	return mapStringUnknown
        }
