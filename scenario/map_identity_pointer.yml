input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            // goverter:map . Address
            ConvertPerson(source Person) (APIPerson, error)

            // goverter:map Name StreetName
            ConvertAddress(source Person) (APIAddress, error)
        }

        type Person struct {
            Name   string
            Street string
            City   string
        }

        type APIPerson struct {
            Name    string
            Address *APIAddress
        }

        type APIAddress struct {
            StreetName string
            City       string
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/summit-fi/goverter/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) ConvertAddress(source execution.Person) (execution.APIAddress, error) {
        	var structsAPIAddress execution.APIAddress
        	structsAPIAddress.StreetName = source.Name
        	structsAPIAddress.City = source.City
        	return structsAPIAddress, nil
        }
        func (c *ConverterImpl) ConvertPerson(source execution.Person) (execution.APIPerson, error) {
        	var structsAPIPerson execution.APIPerson
        	structsAPIPerson.Name = source.Name
        	pStructsAPIAddress, err := c.structsPersonToPStructsAPIAddress(source)
        	if err != nil {
        		return structsAPIPerson, err
        	}
        	structsAPIPerson.Address = pStructsAPIAddress
        	return structsAPIPerson, nil
        }
        func (c *ConverterImpl) structsPersonToPStructsAPIAddress(source execution.Person) (*execution.APIAddress, error) {
        	structsAPIAddress, err := c.ConvertAddress(source)
        	if err != nil {
        		return nil, err
        	}
        	return &structsAPIAddress, nil
        }
