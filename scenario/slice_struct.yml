input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            Convert(source []Input) []Output
        }

        type Input struct {
            Name string
            Age int
        }
        type Output struct {
            Name string
            Age int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/emp1re/goverter-test/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source []execution.Input) []execution.Output {
        	var slicesOutputList []execution.Output
        	if source != nil {
        		slicesOutputList = make([]execution.Output, len(source))
        		for i := 0; i < len(source); i++ {
        			slicesOutputList[i] = c.slicesInputToSlicesOutput(source[i])
        		}
        	}
        	return slicesOutputList
        }
        func (c *ConverterImpl) slicesInputToSlicesOutput(source execution.Input) execution.Output {
        	var slicesOutput execution.Output
        	slicesOutput.Name = source.Name
        	slicesOutput.Age = source.Age
        	return slicesOutput
        }
