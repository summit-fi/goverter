input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            Convert(source Input) Output
        }

        type Input struct {
            UUID string
            Nested InputNested
        }
        type InputNested struct {
            ID string
        }
        type Output struct {
            Uuid string
            Nested OutputNested
        }
        type OutputNested struct {
            Id string
        }
global:
    - matchIgnoreCase
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/emp1re/goverter-test/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source execution.Input) execution.Output {
        	var structsOutput execution.Output
        	structsOutput.Uuid = source.UUID
        	structsOutput.Nested = c.structsInputNestedToStructsOutputNested(source.Nested)
        	return structsOutput
        }
        func (c *ConverterImpl) structsInputNestedToStructsOutputNested(source execution.InputNested) execution.OutputNested {
        	var structsOutputNested execution.OutputNested
        	structsOutputNested.Id = source.ID
        	return structsOutputNested
        }
