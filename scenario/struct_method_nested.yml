input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            // goverter:map Nested.Age Age
            Convert(source Input) Output
        }

        type Input struct {
            Nested *Nested
        }

        type Nested struct {
        }
        func (Nested) Age() int {
            return 42
        }
        type Output struct {
            Age *int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/emp1re/goverter-test/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source execution.Input) execution.Output {
        	var structsOutput execution.Output
        	var pInt *int
        	if source.Nested != nil {
        		xint := source.Nested.Age()
        		pInt = &xint
        	}
        	var pInt2 *int
        	if pInt != nil {
        		xint2 := *pInt
        		pInt2 = &xint2
        	}
        	structsOutput.Age = pInt2
        	return structsOutput
        }
