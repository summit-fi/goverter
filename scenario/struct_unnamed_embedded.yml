input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            ConvertHouse(source Input) Output
        }

        type X struct { X string }
        type Y struct { Y string }

        type Input struct {
            House struct {
                X
                Y
            }
        }

        type Output struct {
            House struct {
                X
                Y `json:"abc"`
            }
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/emp1re/goverter-test/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) ConvertHouse(source execution.Input) execution.Output {
        	var structsOutput execution.Output
        	var unnamed struct {
        		execution.X
        		execution.Y `json:"abc"`
        	}
        	unnamed.X = c.structsXToStructsX(source.House.X)
        	unnamed.Y = c.structsYToStructsY(source.House.Y)
        	structsOutput.House = unnamed
        	return structsOutput
        }
        func (c *ConverterImpl) structsXToStructsX(source execution.X) execution.X {
        	var structsX execution.X
        	structsX.X = source.X
        	return structsX
        }
        func (c *ConverterImpl) structsYToStructsY(source execution.Y) execution.Y {
        	var structsY execution.Y
        	structsY.Y = source.Y
        	return structsY
        }
