input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            Convert(source *Input) *Output
        }

        type Input struct {
            Name   string
            Values []Input
        }

        type Output struct {
            Name   string
            Values []Output
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/summit-fi/goverter/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source *execution.Input) *execution.Output {
        	var pStructsOutput *execution.Output
        	if source != nil {
        		structsOutput := c.structsInputToStructsOutput((*source))
        		pStructsOutput = &structsOutput
        	}
        	return pStructsOutput
        }
        func (c *ConverterImpl) structsInputToStructsOutput(source execution.Input) execution.Output {
        	var structsOutput execution.Output
        	structsOutput.Name = source.Name
        	var structsOutputList []execution.Output
        	if source.Values != nil {
        		structsOutputList = make([]execution.Output, len(source.Values))
        		for i := 0; i < len(source.Values); i++ {
        			structsOutputList[i] = c.structsInputToStructsOutput(source.Values[i])
        		}
        	}
        	structsOutput.Values = structsOutputList
        	return structsOutput
        }
