input:
    input.go: |
        package skip

        import "time"

        // goverter:converter
        // goverter:skipCopySameType
        type Converter interface {
            Convert(source Input) Output
        }

        type Input struct {
            ID *int
            Map map[string]int
            MapDifferentType map[string]int
            CreatedAt time.Time
            Unnamed struct{Name string}
        }
        type Output struct {
            ID *int
            Map map[string]int
            MapDifferentType map[string]ID
            CreatedAt *time.Time
            Unnamed struct{Name string}
        }

        type ID int
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import (
        	execution "github.com/emp1re/goverter-test/execution"
        	"time"
        )

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source execution.Input) execution.Output {
        	var skipOutput execution.Output
        	skipOutput.ID = source.ID
        	skipOutput.Map = source.Map
        	var mapStringSkipID map[string]execution.ID
        	if source.MapDifferentType != nil {
        		mapStringSkipID = make(map[string]execution.ID, len(source.MapDifferentType))
        		for key, value := range source.MapDifferentType {
        			mapStringSkipID[key] = execution.ID(value)
        		}
        	}
        	skipOutput.MapDifferentType = mapStringSkipID
        	skipOutput.CreatedAt = c.timeTimeToPTimeTime(source.CreatedAt)
        	skipOutput.Unnamed = source.Unnamed
        	return skipOutput
        }
        func (c *ConverterImpl) timeTimeToPTimeTime(source time.Time) *time.Time {
        	return &source
        }
