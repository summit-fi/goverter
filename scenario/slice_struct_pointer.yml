input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            ConvertP(source []Input) []*Output
            ConvertPToP(source []*Input) []*Output
        }

        type Input struct {
            Name string
            Age int
        }
        type Output struct {
            Name string
            Age int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/emp1re/goverter-test/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) ConvertP(source []execution.Input) []*execution.Output {
        	var pSlicesOutputList []*execution.Output
        	if source != nil {
        		pSlicesOutputList = make([]*execution.Output, len(source))
        		for i := 0; i < len(source); i++ {
        			pSlicesOutputList[i] = c.slicesInputToPSlicesOutput(source[i])
        		}
        	}
        	return pSlicesOutputList
        }
        func (c *ConverterImpl) ConvertPToP(source []*execution.Input) []*execution.Output {
        	var pSlicesOutputList []*execution.Output
        	if source != nil {
        		pSlicesOutputList = make([]*execution.Output, len(source))
        		for i := 0; i < len(source); i++ {
        			pSlicesOutputList[i] = c.pSlicesInputToPSlicesOutput(source[i])
        		}
        	}
        	return pSlicesOutputList
        }
        func (c *ConverterImpl) pSlicesInputToPSlicesOutput(source *execution.Input) *execution.Output {
        	var pSlicesOutput *execution.Output
        	if source != nil {
        		var slicesOutput execution.Output
        		slicesOutput.Name = (*source).Name
        		slicesOutput.Age = (*source).Age
        		pSlicesOutput = &slicesOutput
        	}
        	return pSlicesOutput
        }
        func (c *ConverterImpl) slicesInputToPSlicesOutput(source execution.Input) *execution.Output {
        	var slicesOutput execution.Output
        	slicesOutput.Name = source.Name
        	slicesOutput.Age = source.Age
        	return &slicesOutput
        }
