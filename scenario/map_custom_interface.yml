input:
    input.go: |
        package structs

        import (
            "fmt"
            "time"
        )

        // goverter:converter
        type Converter interface {
            // goverter:map V1 | ToString
            // goverter:map V2 | time:Now
            Convert(source Input) Output
        }

        type Input struct {
            V1 time.Time
        }
        type Output struct {
            V1 string
            V2 fmt.Stringer
        }
        func ToString(s fmt.Stringer) string {
            return s.String()
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import (
        	execution "github.com/emp1re/goverter-test/execution"
        	"time"
        )

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source execution.Input) execution.Output {
        	var structsOutput execution.Output
        	structsOutput.V1 = execution.ToString(source.V1)
        	structsOutput.V2 = time.Now()
        	return structsOutput
        }
