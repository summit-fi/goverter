input:
    input.go: |
        package structs

        import "io"

        // goverter:converter
        // goverter:extend ConvertInterface
        type Converter interface {
            Convert(source map[string]interface{ io.Reader }) map[string]interface{ io.Writer }
        }

        func ConvertInterface(x interface{io.Reader}) interface{io.Writer} {
            return nil
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import (
        	execution "github.com/emp1re/goverter-test/execution"
        	"io"
        )

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source map[string]interface {
        	io.Reader
        }) map[string]interface {
        	io.Writer
        } {
        	var mapStringUnknown map[string]interface {
        		io.Writer
        	}
        	if source != nil {
        		mapStringUnknown = make(map[string]interface {
        			io.Writer
        		}, len(source))
        		for key, value := range source {
        			mapStringUnknown[key] = execution.ConvertInterface(value)
        		}
        	}
        	return mapStringUnknown
        }
