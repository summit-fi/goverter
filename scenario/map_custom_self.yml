input:
    input.go: |
        package structs
        // goverter:converter
        type Converter interface {
            // goverter:map . Animals | Combine
            Convert(source *Input) *Output
            ConvertDogs([]Dog) []Animal
            ConvertCats([]Cat) []Animal
        }

        type Input struct {
            Cats []Cat
            Dogs []Dog
        }
        type Output struct {
            Animals []Animal
        }

        type Cat struct { Name string }
        type Dog struct { Name string }

        type Animal struct { Name string }

        func Combine(c Converter, input Input) []Animal {
            dogs := c.ConvertDogs(input.Dogs)
            cats := c.ConvertCats(input.Cats)
            return append(dogs, cats...)
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/summit-fi/goverter/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source *execution.Input) *execution.Output {
        	var pStructsOutput *execution.Output
        	if source != nil {
        		var structsOutput execution.Output
        		structsOutput.Animals = execution.Combine(c, (*source))
        		pStructsOutput = &structsOutput
        	}
        	return pStructsOutput
        }
        func (c *ConverterImpl) ConvertCats(source []execution.Cat) []execution.Animal {
        	var structsAnimalList []execution.Animal
        	if source != nil {
        		structsAnimalList = make([]execution.Animal, len(source))
        		for i := 0; i < len(source); i++ {
        			structsAnimalList[i] = c.structsCatToStructsAnimal(source[i])
        		}
        	}
        	return structsAnimalList
        }
        func (c *ConverterImpl) ConvertDogs(source []execution.Dog) []execution.Animal {
        	var structsAnimalList []execution.Animal
        	if source != nil {
        		structsAnimalList = make([]execution.Animal, len(source))
        		for i := 0; i < len(source); i++ {
        			structsAnimalList[i] = c.structsDogToStructsAnimal(source[i])
        		}
        	}
        	return structsAnimalList
        }
        func (c *ConverterImpl) structsCatToStructsAnimal(source execution.Cat) execution.Animal {
        	var structsAnimal execution.Animal
        	structsAnimal.Name = source.Name
        	return structsAnimal
        }
        func (c *ConverterImpl) structsDogToStructsAnimal(source execution.Dog) execution.Animal {
        	var structsAnimal execution.Animal
        	structsAnimal.Name = source.Name
        	return structsAnimal
        }
