input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            ConvertHouse(source Input) Output
        }

        type Input struct {
            House []struct {
                Name string
            }
        }

        type Output struct {
            House []struct {
                Name string
            }
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/emp1re/goverter-test/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) ConvertHouse(source execution.Input) execution.Output {
        	var structsOutput execution.Output
        	var unnamedList []struct {
        		Name string
        	}
        	if source.House != nil {
        		unnamedList = make([]struct {
        			Name string
        		}, len(source.House))
        		for i := 0; i < len(source.House); i++ {
        			var unnamed struct {
        				Name string
        			}
        			unnamed.Name = source.House[i].Name
        			unnamedList[i] = unnamed
        		}
        	}
        	structsOutput.House = unnamedList
        	return structsOutput
        }
