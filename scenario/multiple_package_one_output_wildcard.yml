input:
    model/model.go: |
        package model

        type Input struct {
            ID int
        }
        type Output struct {
            ID int
        }
    pkg1/input.go: |
        package pkg1

        import model "github.com/emp1re/goverter-test/execution/model"

        // goverter:converter
        // goverter:output:file ../generated/output.go
        type Converter interface {
            Convert(source model.Input) model.Output
        }
    pkg2/input.go: |
        package pkg2

        import model "github.com/emp1re/goverter-test/execution/model"

        // goverter:converter
        // goverter:output:file ../generated/output.go
        type Converter2 interface {
            Convert(source model.Input) model.Output
        }
patterns:
    - github.com/emp1re/goverter-test/execution/...
success:
    - generated/output.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import model "github.com/emp1re/goverter-test/execution/model"

        type Converter2Impl struct{}

        func (c *Converter2Impl) Convert(source model.Input) model.Output {
        	var modelOutput model.Output
        	modelOutput.ID = source.ID
        	return modelOutput
        }

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source model.Input) model.Output {
        	var modelOutput model.Output
        	modelOutput.ID = source.ID
        	return modelOutput
        }
