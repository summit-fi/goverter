input:
    input.go: |
        package structs

        // goverter:converter
        // goverter:extend strconv:Atoi
        type Converter interface {
            Convert(source []Person) ([]APIPerson, error)

            // goverter:map . Address
            ConvertPerson(source Person) (APIPerson, error)

            ConvertAddress(source Person) (APIAddress, error)
        }

        type Person struct {
            Name       string
            Street     string
            City       string
            PostalCode string
        }

        type APIPerson struct {
            Name    string
            Address *APIAddress
        }

        type APIAddress struct {
            Street     string
            City       string
            PostalCode int
        }
global:
    - wrapErrors
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import (
        	"fmt"
        	execution "github.com/emp1re/goverter-test/execution"
        	"strconv"
        )

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source []execution.Person) ([]execution.APIPerson, error) {
        	var structsAPIPersonList []execution.APIPerson
        	if source != nil {
        		structsAPIPersonList = make([]execution.APIPerson, len(source))
        		for i := 0; i < len(source); i++ {
        			structsAPIPerson, err := c.ConvertPerson(source[i])
        			if err != nil {
        				return nil, fmt.Errorf("error setting index %d: %w", i, err)
        			}
        			structsAPIPersonList[i] = structsAPIPerson
        		}
        	}
        	return structsAPIPersonList, nil
        }
        func (c *ConverterImpl) ConvertAddress(source execution.Person) (execution.APIAddress, error) {
        	var structsAPIAddress execution.APIAddress
        	structsAPIAddress.Street = source.Street
        	structsAPIAddress.City = source.City
        	xint, err := strconv.Atoi(source.PostalCode)
        	if err != nil {
        		return structsAPIAddress, fmt.Errorf("error setting field PostalCode: %w", err)
        	}
        	structsAPIAddress.PostalCode = xint
        	return structsAPIAddress, nil
        }
        func (c *ConverterImpl) ConvertPerson(source execution.Person) (execution.APIPerson, error) {
        	var structsAPIPerson execution.APIPerson
        	structsAPIPerson.Name = source.Name
        	pStructsAPIAddress, err := c.structsPersonToPStructsAPIAddress(source)
        	if err != nil {
        		return structsAPIPerson, fmt.Errorf("error setting field Address: %w", err)
        	}
        	structsAPIPerson.Address = pStructsAPIAddress
        	return structsAPIPerson, nil
        }
        func (c *ConverterImpl) structsPersonToPStructsAPIAddress(source execution.Person) (*execution.APIAddress, error) {
        	structsAPIAddress, err := c.ConvertAddress(source)
        	if err != nil {
        		return nil, err
        	}
        	return &structsAPIAddress, nil
        }
