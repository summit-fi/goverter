input:
    input.go: |
        package structs

        import "fmt"

        // goverter:converter
        // the next line enables string converters from local package
        // goverter:extend .*String.*Convert
        type Converter interface {
            Convert(source Input) (Output, error)
        }

        type Input struct {
            Age   string
            Datum int
        }
        type Output struct {
            Age   int
            Datum string
        }

        func IntToStringConvert(int) string {
            return ""
        }
        func StringToZeroConvert(string) (int, error) {
            return 0, fmt.Errorf("not ok")
        }
        // even though it matches the pattern, this const should be silently skipped
        const NotAStringConvert int = 0
        // when regexp pattern is used, methods that do not match convert signature
        // are silently ignored
        func DoubleStringToZeroConvert(a, b string) int {
            return 0
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/emp1re/goverter-test/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source execution.Input) (execution.Output, error) {
        	var structsOutput execution.Output
        	xint, err := execution.StringToZeroConvert(source.Age)
        	if err != nil {
        		return structsOutput, err
        	}
        	structsOutput.Age = xint
        	structsOutput.Datum = execution.IntToStringConvert(source.Datum)
        	return structsOutput, nil
        }
