input:
    input.go: |
        package slices_arrays

        // goverter:converter
        type Converter interface {
           ConvertHouse(source DBHouseNames) APIHouseNames
        }

        type DBHouseNames struct {
           Names ***[]string
        }

        type APIHouseNames struct {
           Names ***[]string
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/emp1re/goverter-test/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) ConvertHouse(source execution.DBHouseNames) execution.APIHouseNames {
        	var slices_arraysAPIHouseNames execution.APIHouseNames
        	var pPPStringList ***[]string
        	if source.Names != nil {
        		var pPStringList **[]string
        		if (*source.Names) != nil {
        			var pStringList *[]string
        			if (*(*source.Names)) != nil {
        				var stringList []string
        				if (*(*(*source.Names))) != nil {
        					stringList = make([]string, len((*(*(*source.Names)))))
        					for i := 0; i < len((*(*(*source.Names)))); i++ {
        						stringList[i] = (*(*(*source.Names)))[i]
        					}
        				}
        				pStringList = &stringList
        			}
        			pPStringList = &pStringList
        		}
        		pPPStringList = &pPStringList
        	}
        	slices_arraysAPIHouseNames.Names = pPPStringList
        	return slices_arraysAPIHouseNames
        }
