input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            Convert(source map[string]Input) map[string]Output
            Convert2(source map[Output]Input) map[Input]Output
        }

        type Input struct {
            Name string
            Age int
        }
        type Output struct {
            Name string
            Age int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/summit-fi/goverter/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source map[string]execution.Input) map[string]execution.Output {
        	var mapStringSlicesOutput map[string]execution.Output
        	if source != nil {
        		mapStringSlicesOutput = make(map[string]execution.Output, len(source))
        		for key, value := range source {
        			mapStringSlicesOutput[key] = c.slicesInputToSlicesOutput(value)
        		}
        	}
        	return mapStringSlicesOutput
        }
        func (c *ConverterImpl) Convert2(source map[execution.Output]execution.Input) map[execution.Input]execution.Output {
        	var mapSlicesInputSlicesOutput map[execution.Input]execution.Output
        	if source != nil {
        		mapSlicesInputSlicesOutput = make(map[execution.Input]execution.Output, len(source))
        		for key, value := range source {
        			mapSlicesInputSlicesOutput[c.slicesOutputToSlicesInput(key)] = c.slicesInputToSlicesOutput(value)
        		}
        	}
        	return mapSlicesInputSlicesOutput
        }
        func (c *ConverterImpl) slicesInputToSlicesOutput(source execution.Input) execution.Output {
        	var slicesOutput execution.Output
        	slicesOutput.Name = source.Name
        	slicesOutput.Age = source.Age
        	return slicesOutput
        }
        func (c *ConverterImpl) slicesOutputToSlicesInput(source execution.Output) execution.Input {
        	var slicesInput execution.Input
        	slicesInput.Name = source.Name
        	slicesInput.Age = source.Age
        	return slicesInput
        }
