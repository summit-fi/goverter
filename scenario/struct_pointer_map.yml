input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            // goverter:map Name Name2
            Convert(source *InputOne) *OutputOne
        }

        type InputOne struct {
            Name string
            Age int
            Nested InputTwo
        }
        type InputTwo struct {
            Name string
            Age int
        }
        type OutputOne struct {
            Name2 string
            Age int
            Nested OutputTwo
        }
        type OutputTwo struct {
            Name string
            Age int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/summit-fi/goverter/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source *execution.InputOne) *execution.OutputOne {
        	var pStructsOutputOne *execution.OutputOne
        	if source != nil {
        		var structsOutputOne execution.OutputOne
        		structsOutputOne.Name2 = (*source).Name
        		structsOutputOne.Age = (*source).Age
        		structsOutputOne.Nested = c.structsInputTwoToStructsOutputTwo((*source).Nested)
        		pStructsOutputOne = &structsOutputOne
        	}
        	return pStructsOutputOne
        }
        func (c *ConverterImpl) structsInputTwoToStructsOutputTwo(source execution.InputTwo) execution.OutputTwo {
        	var structsOutputTwo execution.OutputTwo
        	structsOutputTwo.Name = source.Name
        	structsOutputTwo.Age = source.Age
        	return structsOutputTwo
        }
