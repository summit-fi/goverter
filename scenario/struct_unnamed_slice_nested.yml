input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            ConvertHouse(source Input) Output
        }

        type Input struct {
            House [][]struct {
                Names []string
            }
        }

        type Output struct {
            House [][]struct {
                Names []string
            }
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/emp1re/goverter-test/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) ConvertHouse(source execution.Input) execution.Output {
        	var structsOutput execution.Output
        	var unnamedListList [][]struct {
        		Names []string
        	}
        	if source.House != nil {
        		unnamedListList = make([][]struct {
        			Names []string
        		}, len(source.House))
        		for i := 0; i < len(source.House); i++ {
        			var unnamedList []struct {
        				Names []string
        			}
        			if source.House[i] != nil {
        				unnamedList = make([]struct {
        					Names []string
        				}, len(source.House[i]))
        				for j := 0; j < len(source.House[i]); j++ {
        					var unnamed struct {
        						Names []string
        					}
        					var stringList []string
        					if source.House[i][j].Names != nil {
        						stringList = make([]string, len(source.House[i][j].Names))
        						for k := 0; k < len(source.House[i][j].Names); k++ {
        							stringList[k] = source.House[i][j].Names[k]
        						}
        					}
        					unnamed.Names = stringList
        					unnamedList[j] = unnamed
        				}
        			}
        			unnamedListList[i] = unnamedList
        		}
        	}
        	structsOutput.House = unnamedListList
        	return structsOutput
        }
