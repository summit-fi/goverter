input:
    input.go: |
        package structs

        // goverter:converter
        // goverter:extend ConvertInterface
        type Converter interface {
            Convert(source map[string]interface{}) map[string]interface{}
        }

        func ConvertInterface(x interface{}) interface{} {
            return nil
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/emp1re/goverter-test/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source map[string]interface{}) map[string]interface{} {
        	var mapStringUnknown map[string]interface{}
        	if source != nil {
        		mapStringUnknown = make(map[string]interface{}, len(source))
        		for key, value := range source {
        			mapStringUnknown[key] = execution.ConvertInterface(value)
        		}
        	}
        	return mapStringUnknown
        }
